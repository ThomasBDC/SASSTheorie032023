//resets, variables, mixins, and any utility classes
@use 'sass:color';
//-------------------resets--------------------
@import url('https://fonts.googleapis.com/css2?family=Sora:wght@100;400&display=swap');




//-------------------variables--------------------
$border-thin:1px solid ;
$gray-border-thin:1px solid gray;
$bottom-shadow: 0px 10px 13px -7px #000000, 5px 5px 15px 5px rgba(0,0,0,0);
$transition-site: all 0.5s ease;
$spacer:15px;
$black : rgb(48, 48, 48);
$white: white;
$accent-color: rgb(67, 0, 190);
$color-btn: rgb(194, 194, 194);
$color-btn-hover: lighten($color-btn, 10%);
$media-queries-navbar: "screen and (min-width:750px)";



//-------------------mixins and custom functions--------------------

@function getColorFromBg($bg-color){
  // Parse RGB by isolating each color
  $red: red( $bg-color );
  $green: green( $bg-color );
  $blue: blue( $bg-color );
  // Compute the perceptive luminance, keeping
  // in mind that the human eye favors green.
  $l: 1 - ( 0.299 * $red + 0.587 * $green + 0.114 * $blue ) / 255;
  /* arguably this should be 0.50, but testing out various colors, this seemed to be the best so far. */
  @if ( $l < 0.41 ) {
    // if the luminance is less than 0.5 return black
    @return $black; 
  } @else {
    // if the luminance is more than 0.5 return white
    @return $white; 
  }
}

@mixin button($bg-color: $color-btn) {
  display: inline-block;
  padding: 1em 2em;
  border: $border-thin;
  border-color: darken($bg-color, 20%);
  text-decoration: none;

  background-color: $bg-color;
  color: getColorFromBg($bg-color);

  border-radius: 5px;
  transition: $transition-site;
  &:hover{
      background-color: darken($bg-color, 20%);
      color: getColorFromBg(darken($bg-color, 20%));
  }
}

//-------------------utilities------------------
.transition-scale{
    transition:$transition-site;
    &:hover{
        transform: rotate(2deg);
        cursor: pointer;
    }   
}

@keyframes lights {
    0% {
      color: hsl(230, 14%, 33%);
      text-shadow:
        0 0 1em hsla(320, 100%, 50%, 0.2),
        0 0 0.125em hsla(320, 100%, 60%, 0.3),
        -1em -0.125em 0.5em hsla(40, 100%, 60%, 0),
        1em 0.125em 0.5em hsla(200, 100%, 60%, 0);
    }
    
    30% { 
      color: hsl(231, 14%, 36%);
      text-shadow:
        0 0 1em hsla(320, 100%, 50%, 0.5),
        0 0 0.125em hsla(320, 100%, 60%, 0.5),
        -0.5em -0.125em 0.25em hsla(40, 100%, 60%, 0.2),
        0.5em 0.125em 0.25em hsla(200, 100%, 60%, 0.4);
    }
    
    40% { 
      color: hsl(240, 1%, 30%);
      text-shadow:
        0 0 1em hsla(320, 100%, 50%, 0.5),
        0 0 0.125em hsla(320, 100%, 90%, 0.5),
        -0.25em -0.125em 0.125em hsla(40, 100%, 60%, 0.2),
        0.25em 0.125em 0.125em hsla(200, 100%, 60%, 0.4);
    }
    
    70% {
      color: hsl(228, 3%, 30%);
      text-shadow:
        0 0 1em hsla(320, 100%, 50%, 0.5),
        0 0 0.125em hsla(320, 100%, 60%, 0.5),
        0.5em -0.125em 0.25em hsla(40, 100%, 60%, 0.2),
        -0.5em 0.125em 0.25em hsla(200, 100%, 60%, 0.4);
    }
    
    100% {
      color: hsl(231, 19%, 21%);
      text-shadow:
        0 0 1em hsla(320, 100%, 50%, 0.2),
        0 0 0.125em hsla(320, 100%, 60%, 0.3),
        1em -0.125em 0.5em hsla(40, 100%, 60%, 0),
        -1em 0.125em 0.5em hsla(200, 100%, 60%, 0);
    }
    
  }